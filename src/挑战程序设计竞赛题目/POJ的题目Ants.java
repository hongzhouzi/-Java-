package 挑战程序设计竞赛题目;
/*
n 只蚂蚁以每秒1cm 的速度在长为Lcm 的竿子上爬行。当蚂蚁爬到竿子的端点时就会掉落。由于竿子太细，两只蚂蚁相遇时，它们不能交错通过，
只能各自反向爬回去。对于每只蚂蚁，我们知道它距离竿子左端的距离xi，但不知道它当前的朝向。请计算所有蚂蚁落下竿子所需的最短时间和最长时间。
限制条件
 1 ≤ L ≤ 106
 1 ≤ n ≤ 106
 0 ≤ xi ≤ L
输入：L = 10   n = 3   x = {2, 6, 7}
输出 ：min = 4（左、右、右）      max = 8（右、右、右）
 * 
 * 
 * 解决方案：可以知道两只蚂蚁相遇后，当它们保持原样交错而过继续前进也不会有任何问题。这样看来，可以认为每只蚂蚁都是独立运动的，
 * 所以要求最长时间，只要求蚂蚁到竿子端点的最大距离就好了。这样，不论最长时间还是最短时间，都只要对每只蚂蚁检查一次就OK
 * */
public class POJ的题目Ants {

	public static void main(String[] args) {
		int L=10,n=3,Min=0,Max=0;
		int []x = {2, 6, 7};
		
		for(int i=0;i<n;i++){
			//最短时间
			Min=Math.max(Min, Math.min(x[i], L-x[i]));
			//最长时间
			Max=Math.max(Max, Math.max(x[i], L-x[i]));
		}
		System.out.println("min="+Min+",max="+Max);

	}

}
